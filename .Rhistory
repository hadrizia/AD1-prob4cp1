geom_histogram(stat = count)
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count')
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count' fill = 'magenta')
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'magenta')
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'darkorchid4')
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'darkorchid4') +
labs(x = 'Gênero', y = 'Frequência')
View(top_10_series)
summary(episodes$user_votes)
summary(episodes$user_votes)
summary(episodes$user_rating)
episodes %>% ggplot(aes(user_rating)) +
geom_freqpoly(binwidth = 30, color = 'darkcyan') + xlim(0, 5000) + labs(x = 'Número de votos', y = 'Frequência')
episodes %>% ggplot(aes(user_rating)) +
geom_freqpoly(binwidth = 30, color = 'darkcyan') + xlim(0, 10) + labs(x = 'Número de votos', y = 'Frequência')
episodes %>% ggplot(aes(user_rating)) +
geom_freqpoly(binwidth = 3, color = 'darkcyan') + xlim(0, 10) + labs(x = 'Número de votos', y = 'Frequência')
episodes %>% ggplot(aes(user_rating)) +
geom_freqpoly(binwidth = 1, color = 'darkcyan') + xlim(0, 10) + labs(x = 'Número de votos', y = 'Frequência')
episodes %>% ggplot(aes(user_rating)) +
geom_freqpoly(binwidth = 1, color = 'darkcyan') + xlim(0, 10) + labs(x = 'Nota', y = 'Frequência')
top_minus10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(mean_rating) %>% head(10)
top_minus_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(mean_rating) %>% head(10)
top_minus_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(mean_rating) %>% head(10)
top_minus10_series
top_minus_10_series
top_minus_10_series
top_10_series$gender = c("Game-Show", "Action", "Action", "Comedy", "Drama", "Comedy", "Comedy", "Comedy", "Action", "Horror")
View(top_10_series)
top_minus_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(mean_rating) %>% head(10)
top_minus_10_series$gender = c("Game-Show", "Action", "Action", "Comedy", "Drama", "Comedy", "Comedy", "Comedy", "Action", "Horror")
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'darkorchid4') +
labs(x = 'Gênero', y = 'Frequência')
library(tidyverse)
library(here)
theme_set(theme_bw())
library(tidyverse)
library(here)
theme_set(theme_bw())
episodes = read_csv(here("data/series_from_imdb.csv"),
progress = FALSE,
col_types = cols(.default = col_double(),
series_name = col_character(),
episode = col_character(),
url = col_character(),
season = col_character()))
summary(episodes$user_votes)
episodes %>% ggplot(aes(user_votes)) +
geom_freqpoly(binwidth = 30, color = 'darkcyan') + xlim(0, 5000) + labs(x = 'Número de votos', y = 'Frequência')
summary(episodes$user_rating)
episodes %>% ggplot(aes(user_rating)) +
geom_freqpoly(binwidth = 1, color = 'darkcyan') + xlim(0, 10) + labs(x = 'Nota', y = 'Frequência')
top_100_votes = episodes %>% arrange(-user_votes) %>% top_n(100)
top_100_votes %>%
ggplot(aes(x = r10, y = user_votes)) +
geom_point(alpha = 0.6, color = 'darkcyan') +
labs(x = 'Proporção de notas máximas por episódio', y = 'Número de votações por episódio')
cor(top_100_votes$user_votes, top_100_votes$r10)
top_100_votes %>%
ggplot(aes(x = r1, y = user_votes)) +
geom_point(alpha = 0.6, color = 'darkslateblue') +
labs(x = 'Proporção de notas máximas por episódio', y = 'Número de votações por episódio')
cor(top_100_votes$user_votes, top_100_votes$r1)
series_longas_votos = episodes %>% group_by (series_name) %>%
summarise(cont_total = n(), soma_votos = sum(user_votes)) %>%
mutate(tipo_serie = case_when(cont_total >= 100 ~ 'série longa',
cont_total < 100 ~ 'série curta'))
series_longas_votos %>%
ggplot(aes(x = tipo_serie, y = soma_votos, color = tipo_serie)) +
geom_boxplot() + coord_flip() +
theme(legend.position = 'None') +
labs (x = 'Tipo', y = 'Soma total de votos') + scale_y_continuous(labels = scales::comma)
series_longas_votos %>% arrange(-soma_votos) %>% head(3)
top_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(-mean_rating) %>% head(10)
# Adicionando coluna gender com o gênero predominante da série
top_10_series$gender = c("Action", "Drama", "Action", "Crime", "Action", "Action", "Drama", "Crime", "Drama", "Crime")
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'darkorchid4') +
labs(x = 'Gênero', y = 'Frequência')
top_minus_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(mean_rating) %>% head(10)
# Adicionando coluna gender com o gênero predominante da série
top_minus_10_series$gender = c("Game-Show", "Action", "Action", "Comedy", "Drama", "Comedy", "Comedy", "Comedy", "Action", "Horror")
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'darkorchid4') +
labs(x = 'Gênero', y = 'Frequência')
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'top_minus_10_series') +
labs(x = 'Gênero', y = 'Frequência')
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'skyblue2') +
labs(x = 'Gênero', y = 'Frequência')
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'skyblue2') +
labs(x = 'Gênero', y = 'Frequência')
top_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'turquoise3') +
labs(x = 'Gênero', y = 'Frequência')
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'turquoise3') +
labs(x = 'Gênero', y = 'Frequência')
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'sienna1') +
labs(x = 'Gênero', y = 'Frequência')
turquoise3
top_minus_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(mean_rating) %>% head(10)
# Adicionando coluna gender com o gênero predominante da série
top_minus_10_series$gender = c("Game-Show", "Action", "Action", "Comedy", "Drama", "Comedy", "Comedy", "Comedy", "Action", "Horror")
top_minus_10_series %>% ggplot(aes(x = gender)) +
geom_histogram(stat = 'count', fill = 'turquoise3') +
labs(x = 'Gênero', y = 'Frequência')
library(tidyverse)
library(here)
theme_set(theme_bw())
episodes = read_csv(here("data/series_from_imdb.csv"),
progress = FALSE,
col_types = cols(.default = col_double(),
series_name = col_character(),
episode = col_character(),
url = col_character(),
season = col_character())) %>%
filter(series_name %in% c("Friends", "Desperate Housewives", "House"))
episodes %>% group_by(series_name, season) %>%
summarise(median_by_serie = median(r10)) %>%
ggplot(aes(x = season, y = median_by_serie *100, color = series_name, group=series_name)) +
geom_line(stat='identity') +
geom_point() +
labs(x = "Temporadas", y = "Média de proporção de notas máximas (%)")  +
guides(color=guide_legend("Série"))
episodes %>%
group_by(series_name) %>%
ggplot(aes(x = series_name, y = user_rating)) +
geom_boxplot(width = .5, outlier.color = NA) +
geom_jitter(width = .1, size = 2, alpha = .5, color = "purple") +
labs(x = "Séries", y = "Avaliação no IMDB")
episodes =  episodes %>%
mutate(
rank_odiados = row_number(r1), # maior = mais odiado
rank_amados = row_number(r10), # maior = mais amado
rank_sem_graca = row_number(r5), # maior = mais sem graca,
amado_odiado = rank_amados * rank_odiados) # maior = mais amado E odiado
episodes %>% group_by(series_name) %>%
ggplot(aes(
x = r5,
y = season,
color = series_name,
label = season_ep,
size = rank_sem_graca
)) +
geom_point(alpha = .5) +
geom_text(nudge_x = .001, nudge_y = -.01) +
labs(y = "Temporadas", x = "Proporção de votos neutros") +
guides(color=guide_legend("Série"), size = guide_legend("Nível de chatice"))
episodes %>% group_by(series_name) %>%
ggplot(aes(x = season_ep, y = user_rating, color = series_name)) +
geom_jitter(width = .1, size = .5, alpha = .5) +
geom_line() +
labs(x = "Episódios", y = "Avaliação") +
facet_wrap(~ season) +
guides(color=guide_legend("Série"))
episodes %>% group_by(series_name) %>%
ggplot(aes(
x = r1,
y = season,
color = series_name,
label = season_ep,
size = rank_odiados)) +
geom_point(alpha = .5) +
geom_text(nudge_x = .001, nudge_y = -.01) +
labs(y = "Temporadas", x = "Proporção de votos odiados") +
guides(color=guide_legend("Série"), size = guide_legend("Nível de ódio"))
episodes %>% group_by(series_name) %>%
ggplot(aes(
x = r10,
y = season,
color = series_name,
label = season_ep,
size = rank_amados)) +
geom_point(alpha = .5) +
geom_text(nudge_x = .001, nudge_y = -.01) +
labs(y = "Temporadas", x = "Proporção de votos amados") +
guides(color=guide_legend("Série"), size = guide_legend("Nível de amor"))
top_100_votes = episodes %>% arrange(-user_votes) %>% top_n(100)
top_100_votes %>%
ggplot(aes(x = r10, y = user_votes)) +
geom_point(alpha = 0.6, color = 'darkcyan') +
labs(x = 'Proporção de notas máximas por episódio', y = 'Número de votações por episódio')
cor(top_100_votes$user_votes, top_100_votes$r10)
top_100_votes %>%
ggplot(aes(x = r1, y = user_votes)) +
geom_point(alpha = 0.6, color = 'darkslateblue') +
labs(x = 'Proporção de notas máximas por episódio', y = 'Número de votações por episódio')
series_longas_votos = episodes %>% group_by (series_name) %>%
summarise(cont_total = n(), soma_votos = sum(user_votes)) %>%
mutate(tipo_serie = case_when(cont_total >= 100 ~ 'série longa',
cont_total < 100 ~ 'série curta'))
series_longas_votos %>%
ggplot(aes(x = tipo_serie, y = soma_votos, color = tipo_serie)) +
geom_boxplot() + coord_flip() +
theme(legend.position = 'None') +
labs (x = 'Tipo', y = 'Soma total de votos') + scale_y_continuous(labels = scales::comma)
series_longas_votos %>% arrange(-soma_votos) %>% head(3)
top_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(-mean_rating) %>% head(10)
# Adicionando coluna gender com o gênero predominante da série
top_10_series$gender = c("Action", "Drama", "Action", "Crime", "Action", "Action", "Drama", "Crime", "Drama", "Crime")
top_10_series = episodes %>% group_by(series_name) %>% summarise(mean_rating = mean(user_rating)) %>% arrange(-mean_rating) %>% head(10)
top_10_series$gender = c("Action", "Drama", "Action", "Crime", "Action", "Action", "Drama", "Crime", "Drama", "Crime")
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(tidyverse)
input <- read.csv(here::here('data/data.csv'))
## gerando partição de 80% dos dados para treino
smp_size <- floor(0.8 * nrow(input))
## selecionando feautures que acredito ser mais relevantes para o modelo
data <- input %>%
select(Year, Engine.Fuel.Type, Engine.HP,
Engine.Cylinders, Transmission.Type, Driven_Wheels,
Vehicle.Size, Number.of.Doors, highway.MPG,
city.mpg, Popularity, MSRP) %>% drop_na()
## Setando a seed para fazer a partição reproduzível
set.seed(123)
## Particionando o dataset em dois: treino (80%) e teste (20%)
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
train <- data[train_ind, ]
test <- data[-train_ind, ]
fitControl <- trainControl(method = "repeatedcv",
number = 5)
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(tidyverse)
input <- read.csv(here::here('data/data.csv'))
## gerando partição de 80% dos dados para treino
smp_size <- floor(0.8 * nrow(input))
## selecionando feautures que acredito ser mais relevantes para o modelo
data <- input %>%
select(Year, Engine.Fuel.Type, Engine.HP,
Engine.Cylinders, Transmission.Type, Driven_Wheels,
Vehicle.Size, Number.of.Doors, highway.MPG,
city.mpg, Popularity, MSRP) %>% drop_na()
## Setando a seed para fazer a partição reproduzível
set.seed(123)
## Particionando o dataset em dois: treino (80%) e teste (20%)
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
train <- data[train_ind, ]
test <- data[-train_ind, ]
fitControl <- trainControl(method = "repeatedcv",
number = 5)
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl)
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl)
model.knn
grid <- expand.grid(k = model.knn$bestTune)
tr <- trainControl(method = "optimism_boot")
model.knn.retrain <- train(MSRP ~ .,
data = train,
method = "knn",
tuneGrid = grid,
trControl = tr)
model.knn.retrain
train <- input[train_ind, ]
fitControl <- trainControl(method = "repeatedcv",
number = 5)
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl)
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl,
na.action = na.pass())
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl,
na.action = na.pass)
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl,
metric = "RMSE",
preProcess = "medianImpute",
na.action = na.pass))
model.knn <- caret::train(MSRP ~ .,
tuneGrid = expand.grid(k = 1:10),
data = train,
method = "knn",
trControl = fitControl,
metric = "RMSE",
preProcess = "medianImpute",
na.action = na.pass)
summary(input)
summary(input)
fitControl <- trainControl(method = "repeatedcv",
number = 5)
setwd("~/AD1-prob4cp1")
library(here)
library(readr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample)
install.packages("resample")
library(resample)
theme_set(theme_bw())
data <- read.csv(here("/data/github-users-committing-filetypes.csv"))
data <- data %>% na.omit() %>% glimpse()
data <- data %>% na.omit() %>% glimpse()
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv)
data %>% ggplot(aes(news)) + geom_histogram(binwidth = 10)
data %>% ggplot(aes(old)) + geom_histogram(binwidth = 10)
data %>% ggplot(aes(news)) + geom_histogram(binwidth = 10)
install.packages(c("timeDate", "lubridate"))
library(here)
library(readr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample)
theme_set(theme_bw())
data %>%
mutate(isWeekend = isWeekend(
ymd(paste(the_year,
the_month,
month_day)) ~ 1,
TRUE ~ 0))
library(timeDate)
library(lubridate)
data %>%
mutate(isWeekend = isWeekend(
ymd(paste(the_year,
the_month,
month_day)) ~ 1,
TRUE ~ 0))
data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)))
data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = isWeekend(date))
data %>%
data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = case_when(
isWeekend(date) ~ '1',
TRUE ~ '0'))
data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = case_when(
isWeekend(date) ~ 1,
TRUE ~ 0))
data <- data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = isWeekend(date)
)
View(data)
data <- data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = isWeekend(date)
) %>%
select(-month_day, the_month, the_year)
View(data)
data <- data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = isWeekend(date)
) %>%
select(-month_day, -the_month, -the_year)
data <- read.csv(here("/data/github-users-committing-filetypes.csv"))
data <- read.csv(here::here("/data/github-users-committing-filetypes.csv"))
data <- data %>% na.omit() %>% glimpse()
data <- data %>%
mutate(date =
ymd(paste(the_year,
the_month,
month_day)),
is_weekend = isWeekend(date)
) %>%
select(-month_day, -the_month, -the_year)
View(data)
colnames(data)
View(data)
java_data <- data %>% filter(file_extension == 'R')
java_data <- data %>% filter(file_extension == 'java')
java_data %>%
ggplot(aes(x="",
y=users,
group=isWeekend,
fill=isWeekend)) +
geom_boxplot() +
labs(x="") +
ggtitle("Java popularity weekday vs weekend")
java_data %>%
ggplot(aes(x="",
y=users,
group=is_weekend,
fill=is_weekend)) +
geom_boxplot() +
labs(x="") +
ggtitle("Java popularity weekday vs weekend")
java_data %>%
ggplot(aes(x=is_weekend,
y=users,
group=is_weekend,
fill=is_weekend)) +
geom_boxplot() +
labs(x="") +
ggtitle("Java popularity weekday vs weekend")
java_data %>%
ggplot(aes(x=is_weekend,
y=users,
group=is_weekend,
fill=is_weekend)) +
geom_boxplot() +
labs(x="É FDS?") +
ggtitle("Popularidade de Java durante a semana e no FDS")
java_data %>%
ggplot(aes(x=is_weekend,
y=users,
group=is_weekend,
fill=is_weekend)) +
geom_boxplot() +
labs(x="É FDS?") +
ggtitle("Popularidade de Java durante a semana e no FDS") +
theme(legend.position="none")
java_data %>%
ggplot(aes(x=is_weekend,
y=users,
group=is_weekend,
fill=is_weekend)) +
geom_boxplot() +
labs(x="É FDS?") +
ggtitle("Popularidade de Java na semana e no FDS") +
theme(legend.position="none")
java_data %>% group_by(is_weekend) %>%
ggplot(aes(x = is_weekend,
y = users,
#group=is_weekend,
fill=is_weekend)) +
geom_boxplot() +
labs(x = "É FDS?", y = 'Popularidade') +
ggtitle("Popularidade de Java na semana e no FDS") +
theme(legend.position="none")
java_data %>% group_by(is_weekend) %>%
ggplot(aes(x = is_weekend,
y = users,
fill=is_weekend)) +
geom_boxplot() +
ggtitle("Popularidade de Java na semana e no FDS") +
labs(x = "É FDS?", y = 'Popularidade') +
theme(legend.position="none")
java_data %>% group_by(is_weekend) %>%
ggplot(aes(x = is_weekend,
y = users,
fill=is_weekend)) +
geom_boxplot() +
ggtitle("Popularidade de Java na semana e no FDS") +
labs(x = "É FDS?", y = 'Quantidade de usuários') +
theme(legend.position="none")
